name: Crossbow
on:
  push:
    branches:
      - "r-nightly-testing"

jobs:
  r-packages:
    name: ${{ matrix.platform }} ${{ matrix.r_version.r }}
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - devops-managed
        r_version:
          #- { rtools: 40, r: "4.1" }
          - { rtools: 42, r: "4.2" }
    steps:
      - name: Install Homebrew
        shell: arch -arch arm64 bash {0}
        run: |
          # arch -arch arm64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          echo $(eval $(/opt/homebrew/bin/brew shellenv)) >> $GITHUB_PATH
      - name: Install R
        shell: arch -arch arm64 bash {0}
        run: |
          brew install r@{{ matrix.r }} openssl
          rm arrow_*.tgz
          echo "$(brew --prefix node@16)/bin" >> $GITHUB_PATH
          echo "$(brew --prefix ruby)/bin" >> $GITHUB_PATH
          echo "PKG_CONFIG_PATH=$(brew --prefix ruby)/lib/pkgconfig" >> $GITHUB_ENV
      - run: echo $PATH
      - name: Build Binary
        env:
          NOT_CRAN: true
          ARROW_R_DEV: true
          _R_CHECK_CRAN_INCOMING_: false
          ARROW_USE_PKG_CONFIG: false
          FORCE_BUNDLED_BUILD: true
          LIBARROW_MINIMAL: false
        shell: arch -arch arm64 /opt/homebrew/bin/Rscript {0}
        run: |
          
          .Platform$pkgType <- "mac.binary.big-sur-arm64"
          print(contrib.url("", type="mac.binary.big-sur-arm64"))

          on_windows <- tolower(Sys.info()[["sysname"]]) == "windows"

          # Install dependencies by installing (yesterday's) binary, then removing it
          install.packages(c("arrow", "cpp11"),
            # TODO replace with https://nightly.wujciak.de/r
            type = "mac.binary.big-sur-arm64",
            repos = c("https://arrow-r-nightly.s3.amazonaws.com", "https://cloud.r-project.org")
          )
          remove.packages("arrow")

          # Build
          Sys.setenv(MAKEFLAGS = paste0("-j", parallel::detectCores()))
          INSTALL_opts <- "--build"
          if (!on_windows) {
            # Windows doesn't support the --strip arg
            INSTALL_opts <- c(INSTALL_opts, "--strip")
          }
          install.packages(
            "arrow",
            type = "source",
            repos = "https://nightly.wujciak.de/r",
            INSTALL_opts = INSTALL_opts
          )

          # Test
          library(arrow)
          read_parquet(system.file("v0.7.1.parquet", package = "arrow"))
      - name: Upload package
        shell: arch -arch arm64 bash {0} 
        env:
          USER: ${{ secrets.CROSSBOW_NIGHTLIES_USER }}
          PW: ${{ secrets.CROSSBOW_NIGHTLIES_TOKEN }}
          
        run: |
          REPO_PATH=r$(arch -arch arm64 /opt/homebrew/bin/Rscript -e "cat(contrib.url('', type = 'mac.binary.big-sur-arm64'))")
          echo $REPO_PATH
          #curl -s --fail --show-error -u $USER:$PW -T arrow_8.0.0.* https://nightly.wujciak.de:8080/$REPO_PATH/
      - name: Upload binary artifact (temp)
        uses: actions/upload-artifact@v3
        with:
          name: r-arm64-${{ matrix.config.r}}-pkg
          path: arrow_*
  update-repo:
    needs: r-packages
    name: Update PACKAGES
    runs-on: ubuntu-latest
    steps:

      - uses: r-lib/actions/setup-r@v2
        with:
          install-r: false

      - name: Install davfs2 & Mount Repo
        run: | 
          sudo apt update && sudo apt install davfs2
          mkdir nightly
          sudo bash -c 'echo "https://nightly.wujciak.de:8080 ${{ secrets.CROSSBOW_NIGHTLIES_USER }} ${{ secrets.CROSSBOW_NIGHTLIES_TOKEN }}" >> /etc/davfs2/secrets'
          sudo mount -t davfs https://nightly.wujciak.de:8080 nightly -o rw

      - name: Update Repo
        shell: sudo Rscript {0}
        run: |
          bin_dirs <- paste0("nightly/r/bin/", dir("nightly/r/bin", recursive = TRUE, include.dirs = TRUE, pattern = "\\d\\.\\d"))

          for(dir in bin_dirs) {
            win_bin <- grepl("windows", dir)

            if(file.exists(paste0(dir,"/PACKAGES"))) {
              tools::update_PACKAGES(dir , type = ifelse(win_bin, "win.binary", "mac.binary"), latestOnly = FALSE)
            } else {
              tools::write_PACKAGES(dir , type = ifelse(win_bin, "win.binary", "mac.binary"), latestOnly = FALSE)
            }

          }

      - run: sudo umount nightly